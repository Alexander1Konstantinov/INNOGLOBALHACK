import requests
import json
from collections import defaultdict
from pydantic import BaseModel
class LLMHandler:
    def __init__(self):
        self.main_url = "https://vk-devinsight-case.olymp.innopolis.university/generate"
        self.backup_url = "https://vk-devinsight-case-backup.olymp.innopolis.university"
    def evaluate_commits_with_llm(self, prompt):
        url = self.main_url
        data = {
            "prompt": [prompt],
            "apply_chat_template": True,
            "system_prompt": "You are a helpful assistant.",
            "max_tokens": 800,
            "n": 1,
            "temperature": 0.7
        }
        headers = {
            "Content-Type": "application/json"
        }
        response = requests.post(url, data=json.dumps(data), headers=headers)
        if response.status_code == 200:
            return response.json()
        else:
            return f"Error: {response.status_code} - {response.text}"
    def prepare_prompt_code(self, code):
        prompt = '''Задача:  
        Ты - помощник, который помогает другому LLM (языковой модели) сформировать более информативное представление текста из фрагмента кода. Это представление будет использоваться для дальнейшего анализа и определения навыков разработчика.
        Инструкция:  
        1. Входные данные: 
           * Фрагмент кода (изменения в коде) из git репозитория.
           * Описание контекста (опционально, если доступно).
        2. Задача:  
           Преобразуй фрагмент кода в более информативное текстовое представление, которое будет легче анализировать для определения навыков разработчика. 
        3. Критерии информативности:
           * Язык программирования:  Определи язык программирования, на котором написан код.
           * Используемые технологии:  Выдели ключевые технологии, библиотеки, фреймворки, используемые в коде.
           * Тип задачи:  Определи тип задачи, которую решает код (например, работа с базами данных, обработка данных, веб-разработка и т.д.).
           * Сложность:  Оцени сложность кода (например, использование сложных алгоритмов, многопоточность, работа с сетью и т.д.).
           * Комментарии:  Включи в представление комментарии к коду, если они есть, и попытайся извлечь из них дополнительную информацию.
        4. Формат вывода:
           * Текстовое описание, которое включает в себя все вышеперечисленные критерии.
           * Используй четкие и краткие формулировки.
           * Пример:
             * Язык программирования: Python
             * Технологии: Django, Pandas
             * Тип задачи: Веб-разработка, работа с базами данных
             * Сложность: Средняя, использование ORM, работа с формами
             * Комментарии:  Код реализует функцию добавления нового пользователя в базу данных.
        Пример ввода:
        from django.db import models
        class User(models.Model):
            name = models.CharField(max_length=100)
            email = models.EmailField(unique=True)
            created_at = models.DateTimeField(auto_now_add=True)
        Пример вывода:
        Язык программирования: Python
        Технологии: Django
        Тип задачи: Веб-разработка, работа с базами данных
        Сложность: Низкая, создание модели данных
        Комментарии:  Код определяет модель User для хранения данных пользователей.
        Важно:  
        * Не пытайся выполнять код или запускать его.
        * Сосредоточься на анализе и описании кода.
        * Используй свои знания о языках программирования и технологиях, чтобы сделать выводы.
        На выходе ты получишь более информативное представление текста, которое поможет другому LLM определить навыки разработчика.'''
        prompt += code
        return prompt
    def prepare_prompt_analyse(self, code):
        prompt = '''Задача:  
        Ты - помощник, который извлекает информацию о навыках разработчика из более информативного текстового представления и формирует JSON файл нужного формата.
        Инструкция:  
        1. Входные данные: 
           * Более информативное текстовое представление фрагмента кода, созданное на предыдущем шаге.
        2. Задача:  
           Извлеки из текстового представления информацию о языке программирования, используемых технологиях (библиотеках, фреймворках). Сформируй JSON файл, который будет содержать эту информацию в виде пар "навык: уровень_владения_навыком".
        3. Формат JSON:
           * JSON файл должен быть в формате:
             ```json
             {
               "Язык программирования": "Уровень_владения_языком",
               "Технология1": "Уровень_владения_технологией1",
               "Технология2": "Уровень_владения_технологией2"
             }
             ```
           * Уровни владения: 
             * "Новичок"
             * "Средний"
             * "Продвинутый"
        4. Правила определения уровня владения:
           * Язык программирования: 
             * "Новичок" - базовые конструкции языка.
             * "Средний" - использование стандартных библиотек, средний уровень абстракции.
             * "Продвинутый" - сложные алгоритмы, многопоточность, работа с сетью.
           * Технологии: 
             * "Новичок" - использование базовых функций.
             * "Средний" - работа с основными модулями, конфигурация.
             * "Продвинутый" - настройка сложных конфигураций, расширение функционала.
        Пример ввода:
        Язык программирования: Python
        Технологии: Django, Pandas
        Тип задачи: Веб-разработка, работа с базами данных
        Сложность: Средняя, использование ORM, работа с формами
        Комментарии:  Код реализует функцию добавления нового пользователя в базу данных.
        Пример вывода:
        ```json
        {
          "Python": "Средний",
          "Django": "Средний",
          "Pandas": "Новичок"
        }
        ```
        Важно:  
        * Используй информацию из текстового представления для определения уровня владения каждым навыком.
        * Если информация о каком-то навыке отсутствует, не включай его в JSON.
        * Форматируй JSON в соответствии с примером.
        * Уровень "Эксперт" не используется. Вместо этого, если код соответствует уровню "Продвинутый", используй "Продвинутый".
        * Выводи json ТОЛЬКО В НУЖНОМ ФОРМАТЕ. Вначале надо написать 
        ```json, а в конце``` 
        На выходе ты получишь JSON файл, который будет содержать информацию о навыках разработчика, необходимую для дальнейшего анализа и распределения по командам.'''
        prompt += code
        return prompt
    def prepare_prompt_developer_desc(self, code):
        prompt = '''Задача:
        Ты — HR-аналитик, который помогает составить текстовое описание разработчика на основе его технических навыков, уровня владения ими и комментариев к 20 наиболее значимым коммитам. 
        Запрос:
        На основе предоставленных данных о технических навыках и комментариев к 20 наиболее значимым коммитам, сформируй текстовое описание разработчика, которое включает:
        - Общую характеристику: Кратко опиши, какой тип разработчика это (например, фронтенд, бэкенд, full-stack) и какие задачи он выполняет.\\
        - Сильные стороны: Укажи, какие области являются его сильными сторонами (например, оптимизация, безопасность, разработка API).
        ## Пример ввода:
        **Компетенции:**
          Python (продвинутый),
          JavaScript (средний),
          Java (базовый)
          Django (продвинутый),
          React (средний), 
          Spring (базовый)
          Git (продвинутый), 
          Docker (средний),
          Jenkins (базовый)
          PostgreSQL (продвинутый), 
          MongoDB (средний), 
          MySQL (базовый)
        **Комментарии:**
           - "Реализовал функционал аутентификации с использованием JWT."
           - "Исправил баг в модуле обработки данных, который вызывал ошибки при больших нагрузках."
           - "Оптимизировал запросы к базе данных, что привело к ускорению работы приложения на 20%."
           - "Добавил новый API-эндпоинт для получения статистики по пользователям."
           - "Реализовал систему логирования с использованием ELK-стека."
           - "Исправил уязвимость в безопасности, связанную с SQL-инъекциями."
           - "Добавил поддержку мультиязычности в интерфейс приложения."
           - "Реализовал модуль для автоматического тестирования API с использованием Postman."
           - "Оптимизировал работу с кешированием, что привело к уменьшению времени загрузки страниц на 30%."
           - "Исправил баг в алгоритме сортировки, который вызывал некорректные результаты при определенных условиях."
           - "Добавил поддержку WebSocket для реализации чата в реальном времени."
           - "Реализовал систему уведомлений для пользователей."
           - "Исправил баг в модуле авторизации, который вызывал ошибки при использовании некоторых браузеров."
           - "Добавил поддержку PWA для мобильных устройств."
           - "Реализовал модуль для обработки платежей с использованием Stripe."
           - "Исправил баг в модуле отправки email, который вызывал ошибки при большом количестве запросов."
           - "Добавил поддержку GDPR для защиты данных пользователей."
           - "Реализовал модуль для анализа пользовательского поведения с использованием Google Analytics."
           - "Исправил баг в модуле загрузки файлов, который вызывал ошибки при использовании некоторых форматов."
           - "Добавил поддержку CI/CD с использованием Jenkins."
        ## Пример вывода:
        ---
        Общая характеристика:
        Разработчик является full-stack специалистом с сильным уклоном в бэкенд-разработку. Он выполняет широкий спектр задач, включая разработку и оптимизацию серверной части приложений, реализацию функционала аутентификации и безопасности, а также работу с базами данных и API.
        Сильные стороны:
        - Оптимизация: Разработчик имеет опыт в оптимизации запросов к базе данных и работы с кешированием, что привело к значительному улучшению производительности приложений.
        - Безопасность: Он успешно исправлял уязвимости в безопасности, такие как SQL-инъекции, и реализовывал системы аутентификации с использованием JWT.
        - Разработка API: Разработчик имеет опыт в создании и тестировании API, что делает его ценным специалистом для проектов, требующих интеграции с внешними сервисами.
        ---'''
        prompt += code
        return prompt
    def prepare_prompt_style(self, code):
        prompt = '''## Промпт для LLaMA: Анализ соответствия кода коммита стилевым конвенциям в формате JSON
        **Задача:**
        Ты — помощник разработчика, который анализирует код коммита на соответствие стилевым конвенциям и
        формирует отчет в формате JSON с оценкой: "полностью соответствует",
        "значительно соответствует", "частично соответствует" или "не соответствует".
        **Инструкция:**
        1. **Получи код коммита из GitHub.**
        2. **Проанализируй код коммита:**
            * Изучи стилевые конвенции для этого языка программирования (например, PEP 8 для Python, Google Java Style Guide для Java).
            * Проверь код коммита на соответствие выбранным стилевым конвенциям.
        3. **Оцени соответствие кода коммита стилевым конвенциям:**
            * **полностью соответствует:** Код полностью соответствует стилевым конвенциям.
            * ** значительно соответствует:** Код значительно соответствует стилевым конвенциям.
            * **частично соответствует:** Код в частично соответствует стилевым конвенциям.
            * **не соответствует:** Код содержит значительные нарушения стилевых конвенций.
        4. **Сформируй отчет в формате JSON:**
            * Создай структуру JSON, которая будет содержать следующие поля:
                * `compliance_rating`: Оценка соответствия кода 
                стилевым конвенциям ("полностью соответствует", "значительно соответствует", "частично соответствует" или "не соответствует").
        5. **Сгенерируй отчет:**
            * Заполни поля JSON данными, полученными в результате анализа кода коммита.
            * Убедитесь, что отчет четкий, понятный и содержит всю необходимую информацию для разработчика.
        **Пример вывода:**
        ```json
        {
            "compliance_rating": "не соответствует"
        }
        ```
        **Теперь твоя очередь!** 
        **Получи код коммита из GitHub, проанализируй его на соответствие стилевым конвенциям
        и сгенерируй отчет в формате JSON с оценкой: "полностью соответствует", "значительно значительно",
        "частично соответствует" или "не соответствует".**'''
        prompt += '\n' + "Код разработчика: " + code
        return prompt
    def prepare_prompt_architecture(self, code):
        prompt = '''~~~
        Задача:  
        Ты должен проанализировать предоставленное информативное описание коммита и определить уровень участия разработчика в архитектурных решениях. 
        Инструкция:
        1. Анализ информативного описания:  
        - Краткое резюме: Определите, какие архитектурные изменения могут быть затронуты в этом коммите.
        - Комментарий к удаленным строкам: Определите, какие архитектурные элементы или паттерны были удалены или изменены.
        - Комментарий к добавленным строкам: Определите, какие новые архитектурные элементы или паттерны были добавлены.
        2. Оценка уровня участия:  
        - Низкий уровень:  
            - Изменения носят локальный характер (исправление ошибок, рефакторинг, незначительные улучшения).
            - Не затрагивают основные архитектурные компоненты или принципы.
            - Не вносят новые функциональные возможности или изменения в существующие.
        - Средний уровень:  
            - Изменения затрагивают несколько компонентов или модулей системы.
            - Вносят незначительные изменения в архитектуру (например, изменение структуры данных, добавление нового метода в существующий класс).
            - Не требуют серьезного переосмысления архитектуры, но могут влиять на взаимодействие между компонентами.
        - Высокий уровень:  
            - Изменения затрагивают основные архитектурные компоненты или принципы.
            - Вносят новые функциональные возможности или существенные изменения в существующие.
            - Требуют серьезного переосмысления архитектуры и могут повлиять на общую производительность, масштабируемость или безопасность системы.
        3. Формирование результата:  
        - Выведи результат в формате JSON, где ключ "уровень_участия" будет содержать одно из значений: "низкий", "средний" или "высокий".
        Пример ввода:
        Краткое_резюме: Добавлен новый модуль для работы с базой данных.
        Комментарий_к_удаленным_строкам: Удалены устаревшие методы для работы с базой данных.
        Комментарий_к_добавленным_строкам: Добавлены новые классы и интерфейсы для работы с базой данных, реализующие паттерн репозитория.
        Пример вывода:
        ——
        {
        "уровень_участия": "высокий"
        }
        ——
        Примечания:
        - Учитывай контекст проекта и специфику архитектуры при оценке уровня участия.
        - Если информация в информативном описании недостаточна для определения уровня участия, укажи это в комментарии.
        Теперь ты готов к выполнению задачи!
        ~~~'''
        prompt += '\n' + 'Информативное описание коммита ' + code
        return prompt
    def prepare_prompt_added_removed(self, added, removed, message):
        prompt = '''~~~
        Задача:  
        Ты должен проанализировать сообщение коммита, удаленные и добавленные строки кода, и сформировать информативное описание, которое будет использоваться для оценки уровня участия разработчика в архитектурных решениях и качества коммита.
        Инструкции для LLM:
        1. Анализ сообщения коммита:  
        - Определите основную цель коммита.
        - Определите, какие архитектурные решения могли быть затронуты.
        2. Анализ удаленных строк:  
        - Определите, какие части кода были удалены.
        - Определите причину удаления.
        - Определите, какие архитектурные решения были затронуты.
        3. Анализ добавленных строк:  
        - Определите, какие новые части кода были добавлены.
        - Определите причину добавления.
        - Определите, какие архитектурные решения были затронуты.
        4. Формирование информативного описания:  
        - Сформируйте краткое резюме, отражающее суть и цель коммита.
        - Сформируйте комментарий о том, что происходит в удаленных строках кода.
        - Сформируйте комментарий о том, что происходит в добавленных строках кода.
        Формат вывода:
        ### Краткое резюме:
        [Краткое описание изменений в коммите, отражающее суть и цель коммита. Опишите, что было сделано в целом, не углубляясь в детали.]
        ### Удаленные строки:
        [Комментарий о том, что происходит в удаленных строках кода.  Опишите, какие части кода были удалены, почему они были удалены, и какие последствия это может иметь для системы.  Если удаление коснулось архитектурных решений, укажите это.]
        ### Добавленные строки:
        [Комментарий о том, что происходит в добавленных строках кода.  Опишите, какие новые части кода были добавлены, почему они были добавлены, и какие последствия это может иметь для системы.  Если добавление коснулось архитектурных решений, укажите это.]
        ## Пример:
        ——
        Сообщение коммита: "Refactor user authentication to use JWT tokens"
        Удаленные строки:
        # Удалены строки, связанные с устаревшей системой аутентификации на основе сессий:
        # - Удалены функции для создания и проверки сессий
        # - Удалены маршруты для обработки запросов аутентификации на основе сессий
        # - Удалены зависимости от библиотеки для работы с сессиями
        Добавленные строки:
        # Добавлены строки, связанные с внедрением новой системы аутентификации на основе JWT:
        # - Добавлены функции для создания и проверки JWT токенов
        # - Добавлены маршруты для обработки запросов аутентификации на основе JWT
        # - Добавлены зависимости от библиотеки для работы с JWT
        # - Добавлены тесты для новой системы аутентификации
        Краткое резюме:  
        Внедрена новая система аутентификации на основе JWT токенов, заменившая устаревшую систему на основе сессий.
        ——
        Примечания:
        * Старайтесь быть лаконичным и точным в описании.
        * Уделяйте внимание архитектурным решениям, если они затронуты.
        * Используйте язык, понятный для разработчиков.
        ~~~'''
        prompt += '\n' + "Добавленный код " + added
        prompt += '\n' + "Удалённый код " + removed
        prompt += '\n' + "Сообщение коммита " + message
        return prompt
    def prepare_prompt_compression_desc(self, code):
        prompt = '''**Задача:**  
        Сжать развернутое описание разработчика и его сильные стороны в технических навыках, чтобы оно больше характеризовало его как специалиста в определенной роли в команде разработки (например, фронтендер, бэкендер, devops и т.д.). 
        
        **Инструкция:**
        
        1. **Определите роль:**  
           - Проанализируйте описание и выделите ключевые навыки, технологии и опыт, которые наиболее релевантны для определенной роли в команде разработки. 
           - Если в описании нет четкого указания на роль, выберите наиболее подходящую, основываясь на преобладающих навыках и опыте.
        
        2. **Сфокусируйте описание:**  
           - Сократите описание, оставив только те аспекты, которые наиболее важны для выбранной роли. 
           - Уберите излишние детали, которые не имеют прямого отношения к роли.
        
        3. **Выделите сильные стороны:**  
           - Выделите ключевые сильные стороны разработчика, которые делают его ценным специалистом в выбранной роли. 
           - Используйте конкретные примеры из опыта и достижений, чтобы проиллюстрировать эти сильные стороны.
        
        4. **Сформулируйте кратко и ясно:**  
           - Сформулируйте новое описание так, чтобы оно было кратким, ясным и легко воспринимаемым. 
           - Используйте активный залог и профессиональный язык.
        
        **Пример:**
        
        **Исходное описание:**
        
        > Разработчик является Backend-разработчиком с сильным уклоном в фронтенд-разработку. Владеет языками программирования Python, JavaScript, Java. Имеет опыт работы с базами данных MySQL, PostgreSQL, MongoDB. Умеет работать с фреймворками Django, Flask, React, Angular. Имеет опыт работы в команде, умеет решать сложные задачи, быстро учится новым технологиям.
        
        **Сжатый вариант (например, для роли фронтендера):**
        
        > Фронтенд-разработчик. Владеет JavaScript, React, Angular. Имеет опыт работы с базами данных MongoDB. Умеет создавать адаптивные и удобные пользовательские интерфейсы, решать сложные задачи, быстро осваивать новые технологии.
        **Формат ответа:**  
        **Роль в команде:** [Предполагаемая роль, например, "Фронтенд-разработчик"]  
        **Краткое резюме:** [1-2 предложения, обобщающие опыт и достижения кандидата в контексте выбранной роли]
        **Сильные стороны:** [2-3 сильные стороны, релевантные выбранной роли]'''
        prompt += code
        return prompt
    def llama_style(self, prompt):
        url = self.main_url
        class Rating(BaseModel):
            compliance_rating: str
        response = requests.post(url, json={
            "prompt": prompt,
            "schema": Rating.schema(),
            "max_tokens": 600
        }).json()
        return response
    def get_code_commit_description(self, codes, printed=True):
        embeddings = []
        for i, code in enumerate(codes):
            # print(code)
            embeddings.append(self.evaluate_commits_with_llm(self.prepare_prompt_code(code)))
            # print("\nFFFFFFFFFFFFF\n" + embeddings[i])
        if printed:
            for embedding in embeddings:
                print(embedding)
                print('-------------')
        return embeddings
    def get_developer_skills_levels(self, commits_desc, printed=False):
        # Получение строк вида json из информативного описания коммитов и их преобразование в удобный список
        info1 = []
        for desc in commits_desc:
            info1.append(self.evaluate_commits_with_llm(self.prepare_prompt_analyse(desc)))
        # for i in info1:
        #     print(i)
        info_dicts = []
        for i in info1:
            left = i.find('{')
            right = i[left:].find('}') + 1
            i = i[left:right + left]
            try:
                info_dicts.append(json.loads(i))
            except:
                print("!!!!!!!!Здесь произошло что-то неправильное: ", i)
        # Создание словаря с элементами вида "Компетенция_разработчика": "Уровень_владения"
        skills_level = defaultdict(dict)
        for d in info_dicts:
            for key in d:
                if d[key] not in skills_level[key]:
                    skills_level[key][d[key]] = 0
                skills_level[key][d[key]] += 1
        for k in skills_level:
            skills_level[k] = max(skills_level[k], key=lambda x: skills_level[k][x])
        if printed:
            print(skills_level)
        return skills_level
    def get_comments(self, commit_desc, printed=False):
        comments = ''
        for desc in commit_desc:
            comments += desc.split('Комментарии: ')[-1] + '\n'
            if printed:
                print(desc)
                print('-------------')
        return comments